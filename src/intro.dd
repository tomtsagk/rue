(include "intro.ddh")
(include "menu.ddh")

# Init intro
(class_function world_intro void create (group)
	(group

	# initialise animation values
	(dd_clearColour 0 0 0 1)
	(= this.counter 0)
	(= this.positive 1)
	(= this.delay 30)

	# initialise dd logo
	#(this.logo.load (asset "assets/logo.ply" DD_PLY))
	(this.logo.load (asset "assets/logo.asset" DD_PLY))
	(this.logo.set_colour 0 0 0)

	# initialise dd sound
	(this.sound.load (asset "assets/dd_theme.asset" DD_PLY) 0)
	(= this.soundPlayed 0)

	# used for resizing
	(= this.scale 1)

	(this.font.setAlign DD_STRING3D_ALIGN_CENTER)
	(this.font.setColorFront 0.0 0.0 0.0)
	(this.font.setColorBack 0.0 0.0 0.0)

	(this.logoProgram.setVertexShader
		(multistring
			"AVDL_IN vec4 position;\n"
			"AVDL_IN vec3 colour;\n"

			"uniform mat4 matrix;\n"
			"uniform float anim;\n"
			"uniform float time;\n"

			"AVDL_OUT vec4 outColour;\n"

			"void main() {\n"
			"	vec4 pos = matrix *position;\n"

			# waves
			"	float distance = sqrt(pow(pos.x, 2.0) + pow(pos.y, 2.0));\n"
			"	float anim2 = mod(anim *4.0 +(pos.y *0.5), 1.0);\n"
			"	float fuzz = mod(int(time *10) *distance /3.14 +0.015, 0.03);\n"
			"	pos.x += cos(anim2 *2.0 *3.14) *(1 -anim) +fuzz;\n"
			"	pos.y += fuzz;\n"

			# twirl
#			"	float distance = sqrt(pow(pos.x, 2.0) + pow(pos.y, 2.0));\n"
#			"	float anim2 = max(min(((1 -anim) *7.2 -distance), 1.0), 0.0);\n"
#			"	float degrees = ((anim2 *1.0) *2.0 *3.14);\n"
#			"	float x1 = pos.x;\n"
#			"	float y1 = pos.y;\n"
#			"	pos.x = (cos(degrees) *x1 -sin(degrees) *y1);\n"
#			"	pos.y = (sin(degrees) *x1 +cos(degrees) *y1);\n"
#			"	pos.x *= max((distance -(anim2 *8.0)) /distance, 0.0);\n"
#			"	pos.y *= max((distance -(anim2 *8.0)) /distance, 0.0);\n"

			"       gl_Position = pos;\n"
			"       outColour = vec4(colour.rgb, 1.0);\n"
			"}\n"
		)
	)
	(this.logoProgram.setFragmentShader
		(multistring
			"AVDL_IN vec4 outColour;\n"
			"uniform float anim;\n"

			"void main() {\n"
			"	vec4 col = outColour;\n"

			# squares
#			"	col.a = (float(mod(gl_FragCoord.x, 100)) "
#				" +float(mod(gl_FragCoord.y, 100))) /200.0 "
#				" -(0.1 *(mod(gl_FragCoord.x, 500) /100.0)) "
#				" -(0.5 *(mod(gl_FragCoord.y, 500) /100.0)) "
#				" -1.0 +(4.4 *anim);\n"
#			"	if (col.a < 0.9) {\n"
#			"		discard;\n"
#			"	}\n"
			"	avdl_frag_color = col;\n"
			"}\n"
		)
	)

	(= this.logoAnim 0)
	(= this.logoAnimPositive 1)
	(= this.shaderTime 0)

	)
) # create

(class_function world_intro void onload (group)
	(group
	)
)

# Resize to keep the logo constantly visible
(class_function world_intro void resize (group)
	(group

	(def float height)
	(= height (/ (dd_screen_height_get 5) 3.5)) # height of logo
	(def float width)
	(= width (/ (dd_screen_width_get 5) 6.3)) # width of logo

	(if (< width height)
		(= this.scale width)
	# else
		(= this.scale height)
	)

	)
) # resize

# update - update animations
(class_function world_intro void update (group)
	(group

	# update shader time
	(= this.shaderTime (+ this.shaderTime 0.01))

	(if this.logoAnimPositive
		(= this.logoAnim (dd_math_min (+ this.logoAnim 0.01) 1))
		(= this.logoAnim (dd_math_max (- this.logoAnim 0.02) 0))
	)

	# on delay do nothing
	(if (> this.delay 0)
		(= this.delay (- this.delay 1))
	# else
		(group

		# update clear colour
		(dd_clearColour (* this.counter 0.8) (* this.counter 0.6) (* this.counter 1) 1)

		# advance animation
		(if this.positive
			(group
			(= this.counter (+ this.counter 0.02))

			(if (&& (> this.counter 0.25) (== this.soundPlayed 0))
				(group
				(this.sound.play)
				(= this.soundPlayed 1)
				)
			)
			(if (>= this.counter 1)
				(group
				(= this.counter 1)
				(= this.positive 0)
				(= this.delay 100)
				)
			)
			)
		# negative advance of animation
			(group
			(= this.logoAnimPositive 0)
			(= this.counter (- this.counter 0.02))
			(if (<= this.counter 0)
				(group
				(= this.counter 0)
				#(dd_world_prepareReady world_intro 1)
				(dd_world_prepareReady world_menu 1)
				(dd_clearColour 0 0 0 1)
				)
			)
			)
		)
		)
	) # if delay

	)
) # update

# draw
# zoom-out so the world is visible
# rotate the world
# draw the cube
(class_function world_intro void draw (group)
	(group

	(dd_translatef 0 0 -5)
	(dd_scalef this.scale this.scale this.scale)
	(dd_translatef 0 0 0)
	(this.logoProgram.useProgram)
	(def int colLoc)
	(= colLoc (avdl_getUniformLocation this.logoProgram "anim"))
	(avdl_setUniform1f colLoc this.logoAnim)
	(def int sdrTimeLoc)
	(= sdrTimeLoc (avdl_getUniformLocation this.logoProgram "time"))
	(avdl_setUniform1f sdrTimeLoc this.shaderTime)
	(this.logo.draw)
	(avdl_useProgram 0)
	#(dd_translatef 0 -1.5 0)
	#(dd_scalef 0.8 0.8 0.1)
	#(this.font.draw "dark dimension")

	)
)

(class_function world_intro void key_input (group char key)
	(group
	(if (== key 27)
		(= dd_flag_exit 1) # exit game
	)
	)
)


# Clean intro world
(class_function world_intro void clean (group)
	(group
	)
)
