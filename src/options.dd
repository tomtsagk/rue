(include "options.ddh")
(include "credits.ddh")

(class OptionsData 0
	(group
	(def int fpsIndex)
	(def int langIndex)
	(def int audioOn)
	)
)

(class_function options void create ()
	(group

	# fps counter
	(= this.fps 0)
	(= this.fps_dt 0)
	(= this.frames_count 0)
	#(this.fps_label.setText "FPS:")
	#(this.fps_label_int.setTextInt)

	# attempt to load data
	(def OptionsData myOptionsData)

	# success to load - copy loaded data
	(if (== (avdl_data_load myOptionsData OptionsData (savefile "options")) 0)
		(group

		# fps
		(if (|| (< myOptionsData.fpsIndex 0) (>= myOptionsData.fpsIndex 3))
			(= this.fpsIndex 0)
			(= this.fpsIndex myOptionsData.fpsIndex)
		)

		# language
		(if (|| (< myOptionsData.langIndex 0) (>= myOptionsData.langIndex 5))
			(= this.langIndex 0)
			(= this.langIndex myOptionsData.langIndex)
		)
		(if myOptionsData.audioOn
			(avdl_sound_setVolume 100)
			(avdl_sound_setVolume 0)
		)
		)
	# fail to load - supply defaults
		(group
		(= this.fpsIndex 0)
		(= this.langIndex 0)
		(avdl_sound_setVolume 100)
		)
	)

	(if (== this.langIndex 0)
		(avdl_locale_set 0)
	(== this.langIndex 1)
		(avdl_locale_set "en")
	(== this.langIndex 2)
		(avdl_locale_set "el")
	(== this.langIndex 3)
		(avdl_locale_set "de")
	(== this.langIndex 4)
		(avdl_locale_set "ja")
	)

	# font
	(this.font.setAlign DD_STRING3D_ALIGN_CENTER)
	#(this.font.setColorFront 0.8 0.8 0.8)
	#(this.font.setColorBack 0.3 0.3 0.3)

	# buttons
	(= this.buttonTotal 6)
	(this.button[0].mesh.load (asset "assets/button.ply" DD_PLY))

	# toggle fullscreen button
	(this.button[1].mesh.load (asset "assets/button.ply" DD_PLY))
	(if (== (dd_canFullscreenToggle) 0)
		(= this.button[1].isVisible 0)
	)

	# back button
	(this.button[2].mesh.load (asset "assets/button.ply" DD_PLY))

	# credits
	(this.button[3].mesh.load (asset "assets/button.ply" DD_PLY))

	# fps settings
	(this.button[4].mesh.load (asset "assets/button.ply" DD_PLY))
	(if AVDL_VR
		(= this.button[4].isVisible 0)
	)

	# language settings
	(this.button[5].mesh.load (asset "assets/button.ply" DD_PLY))

	# fps label
	(this.fpsLabel.setTextInt)
	(this.fpsLabel.setAlign DD_STRING3D_ALIGN_CENTER)

	# language labels
	(this.langLabelEn.setText "English")
	(this.langLabelEn.setAlign DD_STRING3D_ALIGN_CENTER)
	(this.langLabelEl.setText "Ελληνικά")
	(this.langLabelEl.setAlign DD_STRING3D_ALIGN_CENTER)
	(this.langLabelDe.setText "Deutsch")
	(this.langLabelDe.setAlign DD_STRING3D_ALIGN_CENTER)
	(this.langLabelJa.setText "日本語")
	(this.langLabelJa.setAlign DD_STRING3D_ALIGN_CENTER)

	# text display
	(this.textButton.setSize 1 1)
	(this.textButton.setProportionalPosition 0.5 0.10)
	(this.textButton.setProportionalWidth 0.2)

	(= this.selection 0)
	(= this.selectionClick -1)
	#(= this.isMovingToNewWorld 0)

	(this.buttonProgram.setVertexShader
		(multistring
			"AVDL_IN vec3 colour;\n"
			"AVDL_IN vec2 texCoord;\n"

			"uniform vec3 tint;\n"

			"AVDL_OUT vec2 outTexCoord;\n"
			"AVDL_OUT vec4 outColour;\n"

			"void main() {\n"
			"	vec4 pos = final_position();\n"
			"       gl_Position = pos;\n"
			"       outColour = vec4(colour.rgb *tint.rgb, 1.0);\n"
			"	outTexCoord  = texCoord;\n"
			"}\n"
		)
	)
	(this.buttonProgram.setFragmentShader
		(multistring
			"AVDL_IN vec4 outColour;\n"
			"AVDL_IN vec2 outTexCoord;\n"

			"uniform sampler2D image;\n"

			"void main() {\n"
			"	avdl_frag_color = outColour +avdl_texture(image, outTexCoord);\n"
			"}\n"
		)
	)

	(= this.buttonClickCol[0] 0.389)
	(= this.buttonClickCol[1] 0.055)
	(= this.buttonClickCol[2] 0.682)

	(= this.buttonActiveCol[0] 0.916)
	(= this.buttonActiveCol[1] 0.516)
	(= this.buttonActiveCol[2] 0.074)

	(= this.buttonInactiveCol[0] 0.694)
	(= this.buttonInactiveCol[1] 0.137)
	(= this.buttonInactiveCol[2] 0.137)

	(= this.enabled 0)
	(= this.animationOpen 0)

	(this.hoverSound.load (asset "assets/button_hover.ogg" DD_PLY))
	(this.clickSmallSound.load (asset "assets/button_click_small.ogg" DD_PLY))
	(this.clickBigSound.load (asset "assets/button_click_big.ogg" DD_PLY))

	(= this.volumeSound (avdl_sound_getVolume))
	(this.volumeParticle.load (asset "assets/ui_particle.ply" DD_PLY))
	(this.volumeParticleStart.load (asset "assets/ui_particle_start.ply" DD_PLY))

	)
)

(class_function options void resize ()
	(group
	# portrait
	(if (&& (== AVDL_VR 0) (< (dd_window_width) (dd_window_height)))
		(group
		# audio toggle
		(this.button[0].setSize 1 1)
		#(this.button[0].setProportionalPosition 0.5 0.5)
		(this.button[0].setProportionalPosition 0.75 0.32)
		(this.button[0].setProportionalWidth 0.4)
		(this.button[0].setProportionalSize 0.6)

		# full screen toggle (optional)
		(this.button[1].setSize 1 1)
		#(this.button[1].setProportionalPosition 0.5 0.3)
		(this.button[1].setProportionalPosition 0.50 0.32)
		(this.button[1].setProportionalWidth 0.4)
		(this.button[1].setProportionalSize 0.6)

		# back button
		(this.button[2].setSize 1 1)
		#(this.button[2].setProportionalPosition 0.15 0.85)
		(this.button[2].setProportionalPosition 0.15 0.85)
		(this.button[2].setProportionalWidth 0.4)
		(this.button[2].setProportionalSize 0.7)

		# credits
		(this.button[3].setSize 1 1)
		(this.button[3].setProportionalPosition 0.85 0.85)
		(this.button[3].setProportionalWidth 0.4)
		(this.button[3].setProportionalSize 0.7)

		# fps
		(this.button[4].setSize 1 1)
		#(this.button[4].setProportionalPosition 0.25 0.25)
		(this.button[4].setProportionalPosition 0.25 0.32)
		(this.button[4].setProportionalWidth 0.4)
		(this.button[4].setProportionalSize 0.6)

		# language
		(this.button[5].setSize 1 1)
		#(this.button[5].setProportionalPosition 0.45 0.25)
		(this.button[5].setProportionalPosition 0.5 0.58)
		(this.button[5].setProportionalWidth 0.4)
		(this.button[5].setProportionalSize 0.6)
		)
	# landscape
		(group
		# audio toggle
		(this.button[0].setSize 1 1)
		(this.button[0].setProportionalPosition 0.75 0.32)
		(this.button[0].setProportionalWidth 0.3)
		(this.button[0].setProportionalSize 0.7)

		# full screen toggle (optional)
		(this.button[1].setSize 1 1)
		(this.button[1].setProportionalPosition 0.50 0.32)
		(this.button[1].setProportionalWidth 0.3)
		(this.button[1].setProportionalSize 0.7)

		# back button
		(this.button[2].setSize 1 1)
		(this.button[2].setProportionalPosition 0.15 0.85)
		(this.button[2].setProportionalWidth 0.2)
		(this.button[2].setProportionalSize 0.8)

		# credits
		(this.button[3].setSize 1 1)
		(this.button[3].setProportionalPosition 0.85 0.85)
		(this.button[3].setProportionalWidth 0.2)
		(this.button[3].setProportionalSize 0.8)

		# fps
		(this.button[4].setSize 1 1)
		(this.button[4].setProportionalPosition 0.25 0.32)
		(this.button[4].setProportionalWidth 0.4)
		(this.button[4].setProportionalSize 0.7)

		# language
		(this.button[5].setSize 1 1)
		(this.button[5].setProportionalPosition 0.5 0.58)
		(this.button[5].setProportionalWidth 0.4)
		(this.button[5].setProportionalSize 0.7)
		)
	)

	(for (def int i 0) (< i this.buttonTotal) (= i (+ i 1))
		(this.button[i].resize)
	)
	(this.textButton.resize)
	)
)

(class_function options void update (group float dt)
	(group

	# fps calculations
	(= this.fps_dt (+ this.fps_dt dt))
	(= this.frames_count (+ this.frames_count 1))
	(if (>= this.fps_dt 1.0)
		(group
		(= this.fps this.frames_count)
		(= this.frames_count 0)
		(= this.fps_dt (- this.fps_dt 1.0))
		)
	)

	# disabled and animated out, do not update
	(if (&& (== (this.isEnabled) 0) (< this.animationOpen 0.01)) (return))

	# animate opening/closing
	(if (this.isEnabled)
		(= this.animationOpen (dd_math_min (+ this.animationOpen (* 2.0 dt)) 1))
		(= this.animationOpen (dd_math_max (- this.animationOpen (* 3.0 dt)) 0))
	)

	# disabled do not calculate hovering buttons
	(if (== (this.isEnabled) 0) (return))

	(if (== AVDL_VR 0)
		(group
		# check if mouse is hovering over a button
		(for (def int i 0) (< i this.buttonTotal) (= i (+ i 1))
			(group

			(if (== this.selection i)
				(group
				)
				(if (this.button[i].hasMouseCollided)
					(group
					(this.hoverSound.play)
					(= this.selection i)
					)
				)
			)

			(this.button[i].update dt (== this.selection i) (== this.selectionClick i))

			)
		)
		)
	)

	# on systems with visible controllers (quest 2 for now)
	(if (dd_matrix_hasVisibleControllers)
		(for (def int i 1) (< i 2) (= i (+ i 1))
			(group
			(if (dd_matrix_isControllerVisible i)
				(group
				# check if mouse is hovering over a button
				(for (def int j 0) (< j this.buttonTotal) (= j (+ j 1))
					(group

					(if (== this.selection j)
						(group
						)
						(if (this.button[j].hasPositionCollided (dd_matrix_getControllerPosition i))
							(group
							(this.hoverSound.play)
							(= this.selection j)
							)
						)
					)

					(this.button[j].update dt (== this.selection j) (== this.selectionClick j))

					)
				)
				)
			)
			)
		)
	)

	)
) # update

(class_function options void draw ()
	(group

	# do not draw if animated out
	(if (< this.animationOpen 0.01) (return))

#	# fps counter
#	(dd_matrix_push)
#	(dd_translatef
#		(* (dd_screen_width_get 5) -0.5 0.8)
#		(* (dd_screen_height_get 5) 0.5 0.8)
#		-5
#	)
#	(dd_scalef 0.2 0.2 0.2)
#	(dd_translatef 0 -5 0)
#	(this.fps_label.draw)
#	(dd_translatef 3 0 0)
#	(this.fps_label_int.drawInt this.fps)
#	(dd_matrix_pop)

	# draw buttons
	(this.buttonProgram.useProgram)
	(def int colLoc)
	(= colLoc (avdl_getUniformLocation this.buttonProgram "tint"))
	(for (def int i 0) (< i this.buttonTotal) (= i (+ i 1))
		(group
		(dd_matrix_push)

		# change the shader colour when clicked
		(if (> this.button[i].idleCol 1.0)
			(avdl_graphics_SetUniform3f colLoc
				(dd_math_ease_linear
					(- this.button[i].idleCol 1.0)
					this.buttonActiveCol[0] this.buttonClickCol[0]
				)
				(dd_math_ease_linear
					(- this.button[i].idleCol 1.0)
					this.buttonActiveCol[1] this.buttonClickCol[1]
				)
				(dd_math_ease_linear
					(- this.button[i].idleCol 1.0)
					this.buttonActiveCol[2] this.buttonClickCol[2]
				)
			)
		# change colour when selected
			(avdl_graphics_SetUniform3f colLoc
				(dd_math_ease_linear this.button[i].idleCol this.buttonInactiveCol[0] this.buttonActiveCol[0])
				(dd_math_ease_linear this.button[i].idleCol this.buttonInactiveCol[1] this.buttonActiveCol[1])
				(dd_math_ease_linear this.button[i].idleCol this.buttonInactiveCol[2] this.buttonActiveCol[2])
			)
		)

		(this.button[i].applyTransform)
		(this.button[i].applyMatrixTransform)
		(def float anim)
		# big numbers make animation faster, but blends less together (max 4 - number of buttons)
		# small numbers make animation slower. At 1.0, all buttons animate together
		(def float animationSpeed 2.0)
		(def float animationSpeedMult (- 1.0 (/ 1.0 animationSpeed)))
		(= anim (dd_math_min
				(dd_math_max
					(* (- this.animationOpen (* (/ animationSpeedMult (- this.buttonTotal 1)) i)) animationSpeed)
					0
				)
				1
			)
		)
		(dd_scalef anim anim anim)
		(this.button[i].drawRaw)

		(dd_translatef 0 -0.05 0.1)
		(dd_scalef 0.3 0.3 0.3)

		# draw audio label
		(if (== i 0)
			(group
			(dd_matrix_push)
			(dd_translatef 0 -1.5 0.1)
			(if (> this.volumeSound 2)
				(this.labelYes.draw)
				(this.labelNo.draw)
			)
			(dd_matrix_pop)
			)
		# fps
		(&& (== i 4) this.button[4].isVisible)
			(group
			(dd_matrix_push)
			(dd_translatef 0 -1.5 0.1)
			(if (== this.fpsIndex 0)
				(this.fpsLabel.drawInt 60)
			(== this.fpsIndex 1)
				(this.fpsLabel.drawInt 30)
			(== this.fpsIndex 2)
				(this.fpsLabel.drawInt 45)
			)
			(dd_matrix_pop)
			)
		# language
		(== i 5)
			(group
			(dd_matrix_push)
			(dd_translatef 0 -1.5 0.1)
			(if (== this.langIndex 0)
				(this.langLabelSystem.draw)
			(== this.langIndex 1)
				(this.langLabelEn.draw)
			(== this.langIndex 2)
				(this.langLabelEl.draw)
			(== this.langIndex 3)
				(this.langLabelDe.draw)
			(== this.langIndex 4)
				(this.langLabelJa.draw)
			)
			(dd_matrix_pop)
			)
		)

		(this.button[i].drawText)

		(dd_matrix_pop)
		)
	)
	(avdl_useProgram 0)

	# draw button description
	(if (&& (>= this.selection 0) (> this.animationOpen 0.8))
		(group
		(dd_matrix_push)
		(this.textButton.applyTransform)
		(this.textButton.applyMatrixTransform)
		(dd_translatef 0 0 0.1)
		(dd_scalef 0.3 0.3 0.3)
		(this.button[this.selection].description.drawLimit 16)
		(dd_matrix_pop)
		)
	)

	)
)

(class_function options int key_input (group int key)
	(group

	# enter or space to confirm
	(if (|| (== key 13) (== key 32) (== key AVDL_INPUT_QUEST2_TRIGGER_R))
		(group
		(return (this.button_selection this.selection))
		)
	)

	# navigation - portrait
	(if (< (dd_window_width) (dd_window_height))
		(group

		# left arrow or 'a'
		(if (|| (== key 1) (== key 97))
			(group

			# credits -> music
			(if (== this.selection 4)
				(= this.selection 0)
			# * -> back
				(= this.selection 3)
			)

			)
		# right arrow or 'd'
		(|| (== key 3) (== key 100))
			(group

			# back -> music
			(if (== this.selection 3)
				(= this.selection 0)
			# * -> credits
				(= this.selection 4)
			)

			)
		# up arrow or 'w'
		(|| (== key 2) (== key 119))
			(group

			# toggle -> audio
			(if (== this.selection 2)
				(= this.selection 1)
			# audio -> music
			(== this.selection 1)
				(= this.selection 0)
			# music -> back
			(== this.selection 0)
				(= this.selection 3)
			)

			)
		# down arrow or 's'
		(|| (== key 4) (== key 115))
			(group

			# audio -> toggle
			(if (== this.selection 1)
				(= this.selection 2)
			# music -> audio
			(== this.selection 0)
				(= this.selection 1)
			# back -> music
			(== this.selection 3)
				(= this.selection 0)
			# credits -> music
			(== this.selection 4)
				(= this.selection 0)
			)

			)
		)

		)
	# navigation - landscape
		(group

		# left arrow or 'a'
		(if (|| (== key 1) (== key 97))
			(group

			# audio -> music
			(if (== this.selection 1)
				(= this.selection 0)
			# toggle -> music
			(== this.selection 2)
				(= this.selection 0)
			# music -> back
			(== this.selection 0)
				(= this.selection 3)
			# credits -> back
			(== this.selection 4)
				(= this.selection 3)
			)

			)
		# right arrow or 'd'
		(|| (== key 3) (== key 100))
			(group

			# back -> music
			(if (== this.selection 3)
				(= this.selection 0)
			# music -> audio
			(== this.selection 0)
				(= this.selection 1)
			# toggle -> audio
			(== this.selection 2)
				(= this.selection 1)
			# audio -> credits
			(== this.selection 1)
				(= this.selection 4)
			)

			)
		# up arrow or 'w'
		(|| (== key 2) (== key 119))
			(group

			# toggle -> music
			(if (== this.selection 2)
				(= this.selection 0)
			# music -> back
			(== this.selection 0)
				(= this.selection 3)
			# audio -> credits
			(== this.selection 1)
				(= this.selection 4)
			)

			)
		# down arrow or 's'
		(|| (== key 4) (== key 115))
			(group

			# back -> music
			(if (== this.selection 3)
				(= this.selection 0)
			# music -> toggle
			(== this.selection 0)
				(= this.selection 2)
			# audio -> toggle
			(== this.selection 1)
				(= this.selection 2)
			# credits -> audio
			(== this.selection 4)
				(= this.selection 1)
			)

			)
		)

		)
	)

	(return 0)

	)
)

(class_function options void clean ()
	(group
	)
)

(class_function options int mouse_input (group int button int type)
	(group

	# re-check selection, this allows the user to directly click on a button
	# in a touch screen device
	(for (def int i 0) (< i this.buttonTotal) (= i (+ i 1))
		(group

		(if (this.button[i].hasMouseCollided)
			(group
			(= this.selection i)
			)
		)

		)
	)

	# control the camera look at point when click and dragging
	(if (== type DD_INPUT_MOUSE_TYPE_PRESSED)
		(group
		(if (&& (>= this.selection 0) (this.button[this.selection].hasMouseCollided))
			(= this.selectionClick this.selection)
		)
		)
	(== type DD_INPUT_MOUSE_TYPE_RELEASED)
		(group

		(def int selectionClickTemp this.selectionClick)
		(= this.selectionClick -1)

		# clicked on a button
		(if (&& (== this.selection selectionClickTemp)
			(>= this.selection 0) (this.button[this.selection].hasMouseCollided))
			(group

			(return (this.button_selection selectionClickTemp))

			)
		)

		)
	) # mouse button released

	(return 0)

	)
) # mouse input

(class_function options int isEnabled ()
	(group
	(return this.enabled)
	)
)

(class_function options void enable ()
	(group
	(= this.enabled 1)
	(= this.selectionClick -1)
	)
)

(class_function options void disable ()
	(group
	(= this.enabled 0)
	)
)

(class_function options int button_selection (int button_index)
	(group
	(if (== button_index 0)
		(group
		(this.clickSmallSound.play)
		(if (< this.volumeSound 10)
			(= this.volumeSound 100)
			(= this.volumeSound 0)
		)
		(avdl_sound_setVolume this.volumeSound)
		(if (< this.volumeSound 10)
			(return 2)
			(return 3)
		)
		)
	(== button_index 1)
		(group
		(this.clickSmallSound.play)
		(dd_fullscreenToggle)
		)
	# back button
	(== button_index 2)
		(group
		(this.clickBigSound.play)
		(this.disable)

		# save options
		(this.saveOptions)

		(return 1)
		)
	# credits
	(== button_index 3)
		(group
		(this.clickBigSound.play)
		(this.saveOptions)
		(this.disable)
		(return 6)
		)
	# fps
	(== button_index 4)
		(group
		(= this.fpsIndex (% (+ this.fpsIndex 1) 3))
		(if (== this.fpsIndex 0)
			(avdl_engine_setFPS 60)
		(== this.fpsIndex 1)
			(avdl_engine_setFPS 30)
		(== this.fpsIndex 2)
			(avdl_engine_setFPS 45)
		)
		)
	# language
	(== button_index 5)
		(group
		(= this.langIndex (% (+ this.langIndex 1) 5))
		(if (== this.langIndex 0)
			(avdl_locale_set 0)
		(== this.langIndex 1)
			(avdl_locale_set "en")
		(== this.langIndex 2)
			(avdl_locale_set "el")
		(== this.langIndex 3)
			(avdl_locale_set "de")
		(== this.langIndex 4)
			(avdl_locale_set "ja")
		)
		(this.onLocaleChange)
		(return 7)
		)
	)

	(return 0)
	)
)

(class_function options void setFont (group avdl_font font)
	(group
	(this.labelYes.setFont font)
	(this.labelNo.setFont font)
	(for (def int i 0) (< i this.buttonTotal) (= i (+ i 1))
		(group
		(this.button[i].label.setFont font)
		(this.button[i].description.setFont font)
		)
	)

	(this.fpsLabel.setFont font)
	(this.langLabelSystem.setFont font)
	(this.langLabelEn.setFont font)
	(this.langLabelEl.setFont font)
	(this.langLabelDe.setFont font)
	(this.langLabelJa.setFont font)

	#(this.fps_label.setFont font)
	#(this.fps_label_int.setFont font)
	)
)

(class_function options void onLocaleChange ()
	(group
	# localisation
	(this.localisation.set "menu_options_copy")

	# buttons
	(this.button[0].label.setText (this.localisation.getValue "menu_options_audio"))
	(this.button[0].description.setText (this.localisation.getValue "menu_options_audio_desc"))
	(this.button[1].label.setText (this.localisation.getValue "menu_options_toggle_fullscreen"))
	(this.button[1].description.setText (this.localisation.getValue "menu_options_toggle_fullscreen_desc"))
	(this.button[2].label.setText (this.localisation.getValue "menu_options_back"))
	(this.button[2].description.setText (this.localisation.getValue "menu_options_back_desc"))
	(this.button[3].label.setText (this.localisation.getValue "menu_options_credits"))
	(this.button[3].description.setText (this.localisation.getValue "menu_options_credtis_desc"))
	(this.button[4].label.setText (this.localisation.getValue "menu_options_fps"))
	(this.button[4].description.setText (this.localisation.getValue "menu_options_fps_desc"))
	(this.button[5].label.setText (this.localisation.getValue "menu_options_lang"))
	(this.button[5].description.setText (this.localisation.getValue "menu_options_lang_desc"))

	# Yes/No labels
	(this.labelYes.setText (this.localisation.getValue "menu_options_audio_on"))
	(this.labelYes.setAlign DD_STRING3D_ALIGN_CENTER)
	(this.labelNo.setText (this.localisation.getValue "menu_options_audio_off"))
	(this.labelNo.setAlign DD_STRING3D_ALIGN_CENTER)

	# system language
	(this.langLabelSystem.setText (this.localisation.getValue "menu_options_lang_system"))
	(this.langLabelSystem.setAlign DD_STRING3D_ALIGN_CENTER)

	)
)

(class_function options void saveOptions ()
	(group

	# save options
	(def OptionsData myOptionsData)
	(= myOptionsData.fpsIndex this.fpsIndex)
	(= myOptionsData.langIndex this.langIndex)
	(if (< this.volumeSound 10)
		(= myOptionsData.audioOn 0)
		(= myOptionsData.audioOn 1)
	)
	(avdl_data_save myOptionsData OptionsData (savefile "options"))

	)
)
