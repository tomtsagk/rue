(include "game.ddh")

(def extern ref dd_meshColour newCardMesh)
(def extern ref Card newCard)
(class_function world_game void create (group)
	(group

	# camera control
	(= this.rotX 0)
	(= this.rotY 0)
	(= this.targetRotX 0)
	(= this.targetRotY 0)
	(= this.holdRotX -1)
	(= this.holdRotY -1)

	# center of world
	(dd_matrix_identity this.matCenter)
	(dd_matrix_translate this.matCenter 0 -4 -5)

	# stage
	(this.stage.load (asset "assets/stage_1.asset" DD_PLY))
	(this.table.load (asset "assets/table_1.asset" DD_PLY))

	# card back
	(this.cardBack.load (asset "assets/card_border.asset" DD_PLY))
	(this.cardBack.loadTexture (asset "assets/card_border_texture.asset" DD_PLY))

	# card cardFront
	(this.cardFront[0].load (asset "assets/card.asset" DD_PLY))
	(this.cardFront[0].loadTexture (asset "assets/card_action_1_childish_king.asset" DD_PLY))

	(this.cardFront[1].load (asset "assets/card.asset" DD_PLY))
	(this.cardFront[1].loadTexture (asset "assets/card_action_2.asset" DD_PLY))

	# cards
	(= this.cardsTotal 48)
	(for (def int i 0) (< i this.cardsTotal) (= i (+ i 1))
		(group
		(def int index (dd_math_rand 2))
		(= this.cards[i].mesh this.cardFront[index])
		(= this.cards[i].meshBack this.cardBack)
		)
	)

	# players
	(= this.playersTotal 8)
	(= this.player[0].isUser 1)
	(for (def int i 0) (< i this.playersTotal) (= i (+ i 1))
	(for (def int j 0) (< j 5) (= j (+ j 1))
		(group
		(def int index (+ (* i 5) j))
		(this.player[i].addCard this.cards[index])
		)
	)
	)

	(= this.rotating 0)

	)
)

(class_function world_game void onload (group)
	(group
	)
)

#(class_function world_game void resize (group)
#	(group
#	)
#)

(class_function world_game void update (group)
	(group

	(= this.rotating (+ this.rotating 1))

	# calculate new camera look at point
	(if (>= this.holdRotX 0)
		(group
		(= this.targetRotX (+ this.targetRotX (- (dd_mouse_x) this.holdRotX)))
		(= this.holdRotX (dd_mouse_x))

		(= this.targetRotY (- this.targetRotY (- (dd_mouse_y) this.holdRotY)))
		(= this.holdRotY (dd_mouse_y))
		)
	)

	# slowly approach camera look at point
	(= this.rotX (dd_math_ease_linear 0.1 this.rotX this.targetRotX))
	(= this.rotY (dd_math_ease_linear 0.1 this.rotY this.targetRotY))

	)
) # update

(class_function world_game void draw (group)
	(group

	# camera
	(dd_rotatef this.rotY -1 0 0)
	(dd_rotatef this.rotX 0 1 0)

	# center of world
	(dd_multMatrixf this.matCenter)

	# stage
	(this.stage.draw)
	(this.table.draw)

	# draw every player apart from self
	(for (def int i 1) (< i this.playersTotal) (= i (+ i 1))
		(group
		(dd_matrix_push)
		(dd_rotatef (+ 15 (* (/ 330.0 this.playersTotal) i)) 0 1 0)
		(dd_translatef 0 0 5)

		(if (< i (/ this.playersTotal 2))
			(dd_rotatef 10 0 1 0)
		(> i (/ this.playersTotal 2))
			(dd_rotatef -10 0 1 0)
		)

		(this.player[i].draw)
		(dd_matrix_pop)
		)
	)

	# draw player
	(dd_matrix_push)
	(dd_translatef 0 0 5)
	(this.player[0].draw)
	(dd_matrix_pop)

	(dd_translatef 0 3.5 0)
	(dd_rotatef this.rotating 0 1 0)
	(dd_scalef 0.5 0.5 0.5)
	(this.cardBack.draw)
	(this.cardFront[1].draw)

	)
)

(class_function world_game void key_input (group char key)
	(group
	(if (== key 27)
		(= dd_flag_exit 1) # exit game
	)
	)
)

(class_function world_game void clean (group)
	(group
	)
)

(class_function world_game void mouse_input (group int button int type)
	(group

	# control the camera look at point when click and dragging
	(if (== type DD_INPUT_MOUSE_TYPE_PRESSED)
		(group
		(= this.holdRotX (dd_mouse_x))
		(= this.holdRotY (dd_mouse_y))
		)
	(== type DD_INPUT_MOUSE_TYPE_RELEASED)
		(group
		(= this.holdRotX -1)
		(= this.holdRotY -1)
		)
	)

	)
) # mouse input
