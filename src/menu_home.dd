(include "menu_home.ddh")
(include "credits.ddh")

(class_function menu_home void create ()
	(group

	# localisation
	(this.localisation.set "menu_copy")

	# logo
	(this.logo.set_primitive DD_PRIMITIVE_RECTANGLE)
	(this.logoTexture.set (asset "assets/rue_logo.png" AVDL_IMAGETYPE_PNG))
	(this.logo.setTexture this.logoTexture)
	(this.logo.setTransparency 1)

	# buttons
	(= this.buttonTotal 5)
	(this.button[0].mesh.load (asset "assets/button.ply" DD_PLY))
	(this.button[0].setSize 1 1)
	(this.button[0].setProportionalPosition 0.25 0.4)
	(this.button[0].setProportionalWidth 0.2)
	(this.button[0].setProportionalSize 0.8)
	#(this.button[0].label.setText (this.localisation.getValue "menu_custom_game"))
	(this.button[0].label.setText "Multiplayer")
	#(this.button[0].description.setText (this.localisation.getValue "menu_custom_game_desc"))
	(this.button[0].description.setText "Play online with strangers or friends")
	(if (== (avdl_multiplayer_isEnabled) 0)
		(= this.button[0].isVisible 0)
	)

	(this.button[1].mesh.load (asset "assets/button_play.ply" DD_PLY))
	(this.button[1].setSize 1 1)
	(this.button[1].setProportionalPosition 0.5 0.4)
	(this.button[1].setProportionalWidth 0.2)
	(this.button[1].label.setText (this.localisation.getValue "menu_play"))
	(this.button[1].description.setText (this.localisation.getValue "menu_play_desc"))

	(this.button[2].mesh.load (asset "assets/button_exit.ply" DD_PLY))
	(this.button[2].setSize 1 1)
	(this.button[2].setProportionalPosition 0.75 0.4)
	(this.button[2].setProportionalWidth 0.2)
	(this.button[2].setProportionalSize 0.8)
	(this.button[2].label.setText (this.localisation.getValue "menu_exit"))
	(this.button[2].description.setText (this.localisation.getValue "menu_exit_desc"))

	(this.button[3].mesh.load (asset "assets/button_options.ply" DD_PLY))
	(this.button[3].setSize 1 1)
	(this.button[3].setProportionalPosition 0.85 0.85)
	(this.button[3].setProportionalWidth 0.2)
	(this.button[3].setProportionalSize 0.8)
	(this.button[3].label.setText (this.localisation.getValue "menu_options"))
	(this.button[3].description.setText (this.localisation.getValue "menu_options_desc"))

	(this.button[4].mesh.load (asset "assets/button.ply" DD_PLY))
	(this.button[4].setSize 1 1)
	(this.button[4].setProportionalPosition 0.15 0.85)
	(this.button[4].setProportionalWidth 0.2)
	(this.button[4].setProportionalSize 0.8)
	(this.button[4].label.setText (this.localisation.getValue "menu_credits"))
	(this.button[4].description.setText (this.localisation.getValue "menu_credits_desc"))

	# text display
	(this.textButton.setSize 1 1)
	(this.textButton.setProportionalPosition 0.5 0.15)
	(this.textButton.setProportionalWidth 0.2)

	(= this.selection 1)
	(= this.selectionClick -1)
	#(= this.isMovingToNewWorld 0)

	(this.buttonProgram.setVertexShader
		(multistring
			"AVDL_IN vec4 position;\n"
			"AVDL_IN vec3 colour;\n"
			"AVDL_IN vec2 texCoord;\n"

			"uniform mat4 matrix;\n"
			"uniform vec3 tint;\n"

			"AVDL_OUT vec2 outTexCoord;\n"
			"AVDL_OUT vec4 outColour;\n"

			"void main() {\n"
			"	vec4 pos = matrix *position;\n"
			"       gl_Position = pos;\n"
			"       outColour = vec4(colour.rgb *tint.rgb, 1.0);\n"
			"	outTexCoord  = texCoord;\n"
			"}\n"
		)
	)
	(this.buttonProgram.setFragmentShader
		(multistring
			"AVDL_IN vec4 outColour;\n"
			"AVDL_IN vec2 outTexCoord;\n"

			"uniform sampler2D image;\n"

			"void main() {\n"
			"	avdl_frag_color = outColour +avdl_texture(image, outTexCoord);\n"
			"}\n"
		)
	)

	(= this.buttonClickCol[0] 0.389)
	(= this.buttonClickCol[1] 0.055)
	(= this.buttonClickCol[2] 0.682)

	(= this.buttonActiveCol[0] 0.916)
	(= this.buttonActiveCol[1] 0.516)
	(= this.buttonActiveCol[2] 0.074)

	(= this.buttonInactiveCol[0] 0.694)
	(= this.buttonInactiveCol[1] 0.137)
	(= this.buttonInactiveCol[2] 0.137)

	(= this.enabled 0)
	(= this.animationOpen 0)

	(this.hoverSound.load (asset "assets/button_hover.ogg" DD_PLY))
	(this.clickSmallSound.load (asset "assets/button_click_small.ogg" DD_PLY))
	(this.clickBigSound.load (asset "assets/button_click_big.ogg" DD_PLY))

	(this.versionLabel.setText "v0.4.0")
	(this.versionLabel.setAlign DD_STRING3D_ALIGN_RIGHT)

	)
)

(class_function menu_home void resize ()
	(group
	(for (def int i 0) (< i this.buttonTotal) (= i (+ i 1))
		(this.button[i].resize)
	)
	(this.textButton.resize)
	)
)

(class_function menu_home void update ()
	(group

	# disabled and animated out, do not update
	(if (&& (== (this.isEnabled) 0) (< this.animationOpen 0.01)) (return))

	# animate opening/closing
	(if (this.isEnabled)
		#(= this.animationOpen (dd_math_ease_linear 0.05 this.animationOpen 1))
		(= this.animationOpen (dd_math_min (+ this.animationOpen 0.08) 1))
		(= this.animationOpen (dd_math_max (- this.animationOpen 0.08) 0))
		#(= this.animationOpen (dd_math_ease_linear 0.05 this.animationOpen 0))
	)

	# disabled do not calculate hovering buttons
	(if (== (this.isEnabled) 0) (return))

	# check if mouse is hovering over a button
	(for (def int i 0) (< i this.buttonTotal) (= i (+ i 1))
		(group

		(if (== this.selection i)
			(group
			)
			(if (this.button[i].hasMouseCollided)
				(group
				(this.hoverSound.play)
				(= this.selection i)
				)
			)
		)

		(this.button[i].update (== this.selection i) (== this.selectionClick i))

		)
	)

	)
) # update

(class_function menu_home void draw ()
	(group

	# do not draw if animated out
	(if (< this.animationOpen 0.01) (return))

	# draw buttons
	(this.buttonProgram.useProgram)
	(def int colLoc)
	(= colLoc (avdl_getUniformLocation this.buttonProgram "tint"))
	(for (def int i 0) (< i this.buttonTotal) (= i (+ i 1))
		(group
		(dd_matrix_push)

		# change the shader colour when clicked
		(if (> this.button[i].idleCol 1.0)
			(avdl_setUniform3f colLoc
				(dd_math_ease_linear
					(- this.button[i].idleCol 1.0)
					this.buttonActiveCol[0] this.buttonClickCol[0]
				)
				(dd_math_ease_linear
					(- this.button[i].idleCol 1.0)
					this.buttonActiveCol[1] this.buttonClickCol[1]
				)
				(dd_math_ease_linear
					(- this.button[i].idleCol 1.0)
					this.buttonActiveCol[2] this.buttonClickCol[2]
				)
			)
		# change colour when selected
			(avdl_setUniform3f colLoc
				(dd_math_ease_linear this.button[i].idleCol this.buttonInactiveCol[0] this.buttonActiveCol[0])
				(dd_math_ease_linear this.button[i].idleCol this.buttonInactiveCol[1] this.buttonActiveCol[1])
				(dd_math_ease_linear this.button[i].idleCol this.buttonInactiveCol[2] this.buttonActiveCol[2])
			)
		)

		(this.button[i].applyTransform)
		(this.button[i].applyMatrixTransform)
		(def float anim)
		# big numbers make animation faster, but blends less together (max 4 - number of buttons)
		# small numbers make animation slower. At 1.0, all buttons animate together
		(def float animationSpeed 2.0)
		(def float animationSpeedMult (- 1.0 (/ 1.0 animationSpeed)))
		(= anim (dd_math_min
				(dd_math_max
					(* (- this.animationOpen (* (/ animationSpeedMult (- this.buttonTotal 1)) i)) animationSpeed)
					0
				)
				1
			)
		)
		(dd_scalef anim anim anim)
		(this.button[i].drawRaw)

		(dd_translatef 0 0 0.1)
		(dd_scalef 0.3 0.3 0.3)

		(this.button[i].drawText)

		(dd_matrix_pop)
		)
	)
	(avdl_useProgram 0)

	# draw button description
	(if (>= this.selection 0)
		(group
		(dd_matrix_push)
		(this.textButton.applyTransform)
		(this.textButton.applyMatrixTransform)
		(dd_translatef 0 0 0.1)
		(dd_scalef 0.3 0.3 0.3)
		#(def int limit (* (dd_screen_width_get this.textButton.z) -2))
		(this.button[this.selection].description.drawLimit 25)
#		(if 0#this.isMovingToNewWorld
#			(this.font.drawLimit "loading" limit)
#		(== this.selection 0)
#			(this.font.drawLimit (this.localisation.getValue "menu_custom_game_desc") limit)
#		(== this.selection 1)
#			(this.font.drawLimit (this.localisation.getValue "menu_play_desc") limit)
#		(== this.selection 2)
#			(this.font.drawLimit (this.localisation.getValue "menu_exit_desc") limit)
#		(== this.selection 3)
#			(this.font.drawLimit (this.localisation.getValue "menu_options_desc") limit)
#			(this.font.drawLimit (this.localisation.getValue "menu_credits_desc") limit)
#		)

		(dd_matrix_pop)
		)
	)

	# draw version number
	(dd_matrix_push)
	(dd_translatef
		(+ (/ (dd_screen_width_get 5) 2) -0.15)
		(+ (/ (dd_screen_height_get 5) -2) 0.15)
		-5
	)
	(dd_scalef 0.25 0.25 0.25)
	(this.versionLabel.draw)
	(dd_matrix_pop)

	# draw logo
	(dd_matrix_push)
	(dd_translatef 0 0.6 -2.5)
	(this.logo.draw)
	(dd_matrix_pop)

	)
)

(class_function menu_home void key_input (group char key)
	(group
	)
)

(class_function menu_home void clean ()
	(group
	)
)

(class_function menu_home int mouse_input (group int button int type)
	(group

	# re-check selection, this allows the user to directly click on a button
	# in a touch screen device
	(for (def int i 0) (< i this.buttonTotal) (= i (+ i 1))
		(group

		(if (this.button[i].hasMouseCollided)
			(group
			(= this.selection i)
			)
		)

		)
	)

	# control the camera look at point when click and dragging
	(if (== type DD_INPUT_MOUSE_TYPE_PRESSED)
		(group
		(if (&& (>= this.selection 0) (this.button[this.selection].hasMouseCollided))
			(= this.selectionClick this.selection)
		)
		)
	(== type DD_INPUT_MOUSE_TYPE_RELEASED)
		(group

		# clicked on a button
		(if (&& (== this.selection this.selectionClick)
			(>= this.selection 0) (this.button[this.selection].hasMouseCollided))
			(group

			# custom game
			(if (== this.selectionClick 0)
				(group
				(this.clickBigSound.play)
				(this.disable)
				(return 1)
				)
			# play
			(== this.selectionClick 1)
				(group
				(this.clickBigSound.play)
				(this.disable)
				(return 2)
				)
			# exit game
			(== this.selectionClick 2)
				(group
				(this.clickBigSound.play)
				(= dd_flag_exit 1) # exit game
				)
			# options
			(== this.selectionClick 3)
				(group
				(this.clickBigSound.play)
				(this.disable)
				(return 3)
				)
			# credits
			(== this.selectionClick 4)
				(group
				(this.clickBigSound.play)
				(this.disable)
				(return 4)
				)
			)

			)
		)

		(= this.selectionClick -1)

		)
	) # mouse button released

	(return 0)

	)
) # mouse input

(class_function menu_home int isEnabled ()
	(group
	(return this.enabled)
	)
)

(class_function menu_home void enable ()
	(group
	(= this.enabled 1)
	(= this.selectionClick -1)
	)
)

(class_function menu_home void disable ()
	(group
	(= this.enabled 0)
	)
)
