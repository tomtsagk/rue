# uses C behind the scenes
language: c

# only build the default `github` branch
branches:
  only:
  - master
  - feature/convert-audio-to-mp3

# make builds on `bionic` ubuntu images
# on both `amd64` and `arm64` architectures
jobs:
  include:
    - name: Bionic Build amd64
      os: linux
      dist: bionic
      arch: amd64
#    - name: Bionic Build arm64
#      os: linux
#      dist: bionic
#      arch: arm64

# install dependencies
addons:
  apt:
    packages:
      - git
      - make
      - zip

      # glew dependencies
      - build-essential
      - libxmu-dev
      - libxi-dev
      - libgl-dev

      # SDL & SDL_mixer dependencies
      - build-essential
      - git
      - make
      - cmake
      - autoconf
      - automake
      - libtool
      - pkg-config
      - libasound2-dev
      - libpulse-dev
      - libaudio-dev
      - libjack-dev
      - libx11-dev
      - libxext-dev
      - libxrandr-dev
      - libxcursor-dev
      - libxfixes-dev
      - libxi-dev
      - libxss-dev
      - libgl1-mesa-dev
      - libdbus-1-dev
      - libudev-dev
      - libgles2-mesa-dev
      - libegl1-mesa-dev
      - libibus-1.0-dev
      - fcitx-libs-dev
      - libsamplerate0-dev
      - libsndio-dev
      - libwayland-dev
      - libxkbcommon-dev
      - libdrm-dev
      - libgbm-dev

      # read opus files
      - libopusfile-dev

      # read png files
      - libpng-dev

      # opus
      - libssl-dev

# compile project - first dependencies then the project itlsef
script:

  # install vorbis
  - git clone https://gitlab.xiph.org/xiph/vorbis.git vorbis
  - cd vorbis
  - ./autogen.sh
  - ./configure --prefix=${HOME}/AVDL_DEPENDENCIES
  - make
  - make install
  - cd ..

  # install opus
  - git clone https://gitlab.xiph.org/xiph/opus.git opus
  - cd opus
  - ./autogen.sh
  - ./configure --prefix=${HOME}/AVDL_DEPENDENCIES
  - make
  - make install
  - cd ..
  # lib/libopus.so ->
  # lib/libopus.so.0 ->
  # lib/libopus.so.0.8.0

  # install ogg
  - git clone https://gitlab.xiph.org/xiph/ogg.git ogg
  - cd ogg
  - ./autogen.sh
  - ./configure --prefix=${HOME}/AVDL_DEPENDENCIES
  - make -j6
  - make -j6 install
  - cd ..
  # lib/libogg.so ->
  # lib/libogg.so.0 ->
  # lib/libogg.so.0.8.5

  # install opusfile
  - export PKG_CONFIG_PATH=${HOME}/AVDL_DEPENDENCIES
  - git clone https://gitlab.xiph.org/xiph/opusfile.git opusfile
  - cd opusfile
  - ./autogen.sh
  - ./configure --prefix=${HOME}/AVDL_DEPENDENCIES
  - make -j6
  - make -j6 install
  - cd ..
  # lib/libopusfile.so ->
  # lib/libopusfile.so.0 ->
  # lib/libopusfile.so.0.4.5

  - export C_INCLUDE_PATH=${HOME}/AVDL_DEPENDENCIES/include
  - export LIBRARY_PATH=${HOME}/AVDL_DEPENDENCIES/lib:${HOME}/AVDL_DEPENDENCIES/lib64

  # install SDL
  - git clone https://github.com/libsdl-org/SDL SDL
  - cd SDL
  - git checkout release-2.0.20
  - mkdir build
  - cd build
  - ../configure --prefix=${HOME}/AVDL_DEPENDENCIES
  - make -j6
  - make -j6 install
  - cd ../..

  # install SDL_mixer
  - git clone https://github.com/libsdl-org/SDL_mixer SDL_mixer
  - cd SDL_mixer
  - git checkout release-2.0.4
  - mkdir build
  - cd build
  - ../configure --prefix=${HOME}/AVDL_DEPENDENCIES --enable-music-ogg-vorbis
  - make -j6
  - make -j6 install
  - cd ../..

  # install glew
  - git clone https://github.com/nigels-com/glew glew
  - cd glew
  - git checkout glew-2.2.0
  - cd auto
  - make
  - cd ..
  - make GLEW_DEST=${HOME}/AVDL_DEPENDENCIES
  - make GLEW_DEST=${HOME}/AVDL_DEPENDENCIES install
  - cd ..

  # install avdl
  - git clone https://github.com/tomtsagk/avdl avdl
  - cd avdl
  - git checkout feature/play-opus-files
  - make -j6
  - sudo make -j6 install
  - cd ..

  # install rue
  - make COMPILER_CUSTOM_FLAGS="-i ${HOME}/AVDL_DEPENDENCIES/include" LINKER_CUSTOM_FLAGS="-L ${HOME}/AVDL_DEPENDENCIES/lib -L ${HOME}/AVDL_DEPENDENCIES/lib64" assetdir=
  - mkdir build/native/output/dependencies
  - mkdir build/native/output/bin
  - echo "LD_LIBRARY_PATH=./dependencies/ ./bin/rue" > build/native/output/rue.sh
  - chmod +x build/native/output/rue.sh
  - mv build/native/output/rue build/native/output/bin/rue
#  - cp ${HOME}/AVDL_DEPENDENCIES/lib*/libGLEW.so.2.2.0 build/native/output/dependencies/libGLEW.so.2.2
#  - cp ${HOME}/AVDL_DEPENDENCIES/lib*/libSDL2-2.0.so.0.18.2 build/native/output/dependencies/libSDL2-2.0.so.0
#  - cp ${HOME}/AVDL_DEPENDENCIES/lib*/libSDL2_mixer-2.0.so.0.2.2 build/native/output/dependencies/libSDL2_mixer-2.0.so.0
#  - cp ${HOME}/AVDL_DEPENDENCIES/lib*/libopus.so.0.8.0 build/native/output/dependencies/libopus.so.0.8.0
#  - cp ${HOME}/AVDL_DEPENDENCIES/lib*/libogg.so.0.8.5 build/native/output/dependencies/libogg.so.0.8.5
#  - cp ${HOME}/AVDL_DEPENDENCIES/lib*/libopusfile.so.0.4.5 build/native/output/dependencies/libopusfile.so.0.4.5
  - cp ${HOME}/AVDL_DEPENDENCIES/lib*/* -r build/native/output/dependencies/
  - cd build/native/output
  #- zip "rue-$TRAVIS_BRANCH-$TRAVIS_OS_NAME-$TRAVIS_CPU_ARCH.zip" -r *
  - zip "rue-test-$TRAVIS_OS_NAME-$TRAVIS_CPU_ARCH.zip" -r *
  - cd ../../../

deploy:
  provider: releases
  api_key: "$GITHUB_DEPLOY_RUE"
  #file: "build/native/output/rue-$TRAVIS_BRANCH-$TRAVIS_OS_NAME-$TRAVIS_CPU_ARCH.zip"
  file: "build/native/output/rue-test-$TRAVIS_OS_NAME-$TRAVIS_CPU_ARCH.zip"
  skip_cleanup: true
  draft: true
  #on:
  #  tags: true
