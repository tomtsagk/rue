name: Create Build

on:
  push:
    branches:
      - develop
      - master
      -  feature/consume_avdl_makefile
    tags:
      "v[0-9]+.[0-9]+.[0-9]+"
  pull_request:
    branches:
      - develop
      - master

env:
  AVDL_BUILD_URL_LINUX: https://github.com/tomtsagk/avdl/releases/download/v0.7.3/avdl_v0.7.3_linux.zip
  AVDL_BUILD_URL_WINDOWS: https://github.com/tomtsagk/avdl/releases/download/v0.7.3/avdl_v0.7.3_windows.zip

jobs:
  # Android
  build_android:
    runs-on: ubuntu-latest
    steps:
    - name: init_rue
      uses: actions/checkout@v2
    - name: get_avdl
      run: |
        wget $AVDL_BUILD_URL_LINUX -O avdl_build_linux.zip
        unzip avdl_build_linux.zip
        mkdir AVDL_BUILD
        mv avdl_build_linux/* AVDL_BUILD
        rmdir avdl_build_linux
        chmod +x AVDL_BUILD/bin/avdl
    - name: generate_android_project
      run: ./AVDL_BUILD/bin/avdl --android
    - name: compile_apk
      run: |
        cd avdl_build_android
        chmod +x gradlew
        ./gradlew build
        cd ../
        mkdir rue_output
        mv avdl_build_android/app/build/outputs/apk/release/app-universal-release-unsigned.apk rue_output
        mkdir rue_output_debug
        mv avdl_build_android/app/build/outputs/apk/debug/app-universal-debug.apk rue_output_debug
    - name: upload_artifact
      uses: actions/upload-artifact@v3
      with:
        name: rue_android
        path: rue_output
    - name: upload_artifact_debug
      uses: actions/upload-artifact@v3
      with:
        name: rue_android_debug
        path: rue_output_debug
  # Linux
  build_linux:
    runs-on: ubuntu-20.04
    steps:
    - name: update packages
      run: |
         sudo apt update && sudo apt install -y gcc libgl1-mesa-dev
    - name: init_rue
      uses: actions/checkout@v1
    - name: get_avdl
      run: |
        wget $AVDL_BUILD_URL_LINUX -O avdl_build_linux.zip
        unzip avdl_build_linux.zip
        mkdir AVDL_BUILD
        mv avdl_build_linux/* AVDL_BUILD
        rmdir avdl_build_linux
    - name: compile_rue
      run: |
        chmod +x AVDL_BUILD/bin/avdl
        ./AVDL_BUILD/bin/avdl -i ./AVDL_BUILD/dependencies/linux/include -L ./AVDL_BUILD/dependencies/linux/lib --standalone
        mkdir avdl_build/dependencies
        cp ./AVDL_BUILD/dependencies/linux/lib/*.so* avdl_build/dependencies
        rm avdl_build/dependencies/*steam*
    - name: verify
      run: |
        cd avdl_build/
        chmod +x bin/rue
        LD_LIBRARY_PATH=./dependencies/ ./bin/rue --verify
        cd ../
    - name: upload_artifact
      uses: actions/upload-artifact@v3
      with:
        name: rue_build_linux
        path: avdl_build
  # Linux Steam
  build_linux_steam:
    runs-on: ubuntu-20.04
    steps:
    - name: update packages
      run: |
         sudo apt update && sudo apt install -y gcc libgl1-mesa-dev
    - name: init_rue
      uses: actions/checkout@v1
    - name: get_avdl
      run: |
        wget $AVDL_BUILD_URL_LINUX -O avdl_build_linux.zip
        unzip avdl_build_linux.zip
        mkdir AVDL_BUILD
        mv avdl_build_linux/* AVDL_BUILD
        rmdir avdl_build_linux
    - name: compile_rue
      run: |
        chmod +x AVDL_BUILD/bin/avdl
        ./AVDL_BUILD/bin/avdl -i ./AVDL_BUILD/dependencies/linux/include -L ./AVDL_BUILD/dependencies/linux/lib --standalone --steam
        mkdir avdl_build/dependencies
        cp ./AVDL_BUILD/dependencies/linux/lib/*.so* avdl_build/dependencies
    - name: upload_artifact
      uses: actions/upload-artifact@v3
      with:
        name: rue_build_linux_steam
        path: avdl_build
  # Windows
  build_windows:
    runs-on: windows-latest
    steps:
    - name: init_rue
      uses: actions/checkout@v1
    - name: prepare_libraries
      shell: bash
      run: |
        mkdir libraries
    - name: get_avdl
      run: |
        C:\msys64\usr\bin\wget.exe -q $Env:AVDL_BUILD_URL_WINDOWS -O avdl_build_windows.zip
    - name: unpack_avdl
      shell: bash
      run: |
        unzip avdl_build_windows.zip
        mkdir AVDL_BUILD
        mv avdl_build_windows/* AVDL_BUILD
        rmdir avdl_build_windows
        cp -r AVDL_BUILD/dependencies/windows/libpng ./libaries/
        cp -r AVDL_BUILD/dependencies/windows/zlib ./libaries/
    - name: zlib
      shell: bash
      run: |
        cp -r AVDL_BUILD/dependencies/windows/zlib "C:/Program Files (x86)/zlib"
    - name: libpng
      shell: bash
      run: |
        cp -r AVDL_BUILD/dependencies/windows/libpng "C:/Program Files (x86)/libpng"
    - name: get_libraries
      run: |
        C:\msys64\usr\bin\wget.exe -q https://github.com/nigels-com/glew/releases/download/glew-2.2.0/glew-2.2.0-win32.zip
        C:\msys64\usr\bin\wget.exe -q https://github.com/libsdl-org/SDL/releases/download/release-2.0.22/SDL2-devel-2.0.22-VC.zip
        C:\msys64\usr\bin\wget.exe -q https://github.com/libsdl-org/SDL_mixer/releases/download/release-2.6.0/SDL2_mixer-devel-2.6.0-VC.zip
    - name: glew
      shell: bash
      run: |
        mv glew-2.2.0-win32.zip libraries
        cd libraries
        unzip glew-2.2.0-win32.zip
        cd ..
    - name: sdl
      shell: bash
      run: |
        mv SDL2-devel-2.0.22-VC.zip libraries
        cd libraries
        unzip SDL2-devel-2.0.22-VC.zip
        cd ..
    - name: sdl_mixer
      shell: bash
      run: |
        mv SDL2_mixer-devel-2.6.0-VC.zip libraries
        cd libraries
        unzip SDL2_mixer-devel-2.6.0-VC.zip
        cd ..
    - name: compile_rue
      shell: bash
      run: |
        mkdir cengine
        cp -r AVDL_BUILD/share/avdl/cengine/*.c AVDL_BUILD/include/*.h cengine
        mkdir build
        AVDL_BUILD/bin/avdl.exe -t
        cp .avdl_cache/*.c src/
        for i in src/*.c; do mv $i ${i/.dd.c/.c}; done
        cd build
        cmake ../ . -DCMAKE_INSTALL_PREFIX="RUE_BUILD"
        cmake --build . --config Release
        cmake --install .
    - name: upload_artifact
      uses: actions/upload-artifact@v3
      with:
        name: rue_build_windows
        path: build/RUE_BUILD
  # Windows Steam
  build_windows_steam:
    runs-on: windows-latest
    steps:
    - name: init_rue
      uses: actions/checkout@v1
    - name: prepare_libraries
      shell: bash
      run: |
        mkdir libraries
    - name: get_avdl
      run: |
        C:\msys64\usr\bin\wget.exe -q $Env:AVDL_BUILD_URL_WINDOWS -O avdl_build_windows.zip
    - name: unpack_avdl
      shell: bash
      run: |
        unzip avdl_build_windows.zip
        mkdir AVDL_BUILD
        mv avdl_build_windows/* AVDL_BUILD
        rmdir avdl_build_windows
        cp -r AVDL_BUILD/dependencies/windows/libpng ./libaries/
        cp -r AVDL_BUILD/dependencies/windows/zlib ./libaries/
    - name: zlib
      shell: bash
      run: |
        cp -r AVDL_BUILD/dependencies/windows/zlib "C:/Program Files (x86)/zlib"
    - name: libpng
      shell: bash
      run: |
        cp -r AVDL_BUILD/dependencies/windows/libpng "C:/Program Files (x86)/libpng"
    - name: get_libraries
      run: |
        C:\msys64\usr\bin\wget.exe -q https://github.com/nigels-com/glew/releases/download/glew-2.2.0/glew-2.2.0-win32.zip
        C:\msys64\usr\bin\wget.exe -q https://github.com/libsdl-org/SDL/releases/download/release-2.0.22/SDL2-devel-2.0.22-VC.zip
        C:\msys64\usr\bin\wget.exe -q https://github.com/libsdl-org/SDL_mixer/releases/download/release-2.6.0/SDL2_mixer-devel-2.6.0-VC.zip
    - name: glew
      shell: bash
      run: |
        mv glew-2.2.0-win32.zip libraries
        cd libraries
        unzip glew-2.2.0-win32.zip
        cd ..
    - name: sdl
      shell: bash
      run: |
        mv SDL2-devel-2.0.22-VC.zip libraries
        cd libraries
        unzip SDL2-devel-2.0.22-VC.zip
        cd ..
    - name: sdl_mixer
      shell: bash
      run: |
        mv SDL2_mixer-devel-2.6.0-VC.zip libraries
        cd libraries
        unzip SDL2_mixer-devel-2.6.0-VC.zip
        cd ..
    - name: compile_rue
      shell: bash
      run: |
        mkdir cengine
        cp -r AVDL_BUILD/share/avdl/cengine/*.c AVDL_BUILD/share/avdl/cengine/*.cpp AVDL_BUILD/include/*.h cengine
        mkdir build
        ./AVDL_BUILD/bin/avdl.exe -t
        cp .avdl_cache/*.c src/
        for i in src/*.c; do mv $i ${i/.dd.c/.c}; done
        cd build
        cmake ../ . -DCMAKE_INSTALL_PREFIX="RUE_BUILD" -DAVDL_STEAM=1
        cmake --build . --config Release
        cmake --install .
        cd ..
    - name: upload_artifact
      uses: actions/upload-artifact@v3
      with:
        name: rue_build_windows_steam
        path: build/RUE_BUILD
  create_release:
    if: ${{ github.ref_type == 'tag' }}
    runs-on: ubuntu-20.04
    needs: [build_linux, build_linux_steam, build_windows, build_windows_steam, build_android]
    steps:
    - uses: actions/download-artifact@v3
      with:
        name: rue_build_linux
        path: rue_build_linux
    - uses: actions/download-artifact@v3
      with:
        name: rue_build_linux_steam
        path: rue_build_linux_steam
    - uses: actions/download-artifact@v3
      with:
        name: rue_build_windows
        path: rue_build_windows
    - uses: actions/download-artifact@v3
      with:
        name: rue_build_windows_steam
        path: rue_build_windows_steam
    - uses: actions/download-artifact@v3
      with:
        name: rue_android
        path: rue_android
    - name: zip packages
      run: |
         sudo apt update && sudo apt install -y zip
         zip rue_build_linux.zip rue_build_linux -r
         zip rue_build_linux_steam.zip rue_build_linux_steam -r
         zip rue_build_windows.zip rue_build_windows -r
         zip rue_build_windows_steam.zip rue_build_windows_steam -r
         zip rue_build_android.zip rue_android -r
    - name: create release
      uses: actions/create-release@v1
      id: create_release
      with:
        draft: true
        prerelease: false
        release_name: ${{ steps.version.outputs.version }}
        tag_name: ${{ github.ref }}
#        body_path: CHANGELOG.md
      env:
        GITHUB_TOKEN: ${{ github.token }}
    - name: upload linux artifact
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ github.token }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: rue_build_linux.zip
        asset_name: rue_${{ github.ref_name }}_linux.zip
        asset_content_type: application/gzip
    - name: upload linux steam artifact
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ github.token }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: rue_build_linux_steam.zip
        asset_name: rue_${{ github.ref_name }}_linux_steam.zip
        asset_content_type: application/gzip
    - name: upload windows artifact
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ github.token }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: rue_build_windows.zip
        asset_name: rue_${{ github.ref_name }}_windows.zip
        asset_content_type: application/gzip
    - name: upload windows steam artifact
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ github.token }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: rue_build_windows_steam.zip
        asset_name: rue_${{ github.ref_name }}_windows_steam.zip
        asset_content_type: application/gzip
    - name: upload android artifact
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ github.token }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: rue_build_android.zip
        asset_name: rue_${{ github.ref_name }}_android.zip
        asset_content_type: application/gzip
